# @generated - This file is copied in by tool-static-analysis
# NW: Except where otherwise noted, all of these settings are non-default. All
# default settings have been removed from this file.

[MAIN]

# Specify a score threshold under which the program will exit with error.
# NW: This is the default, kept for clarity
fail-under=10.0

# Minimum Python version to use for version dependent checks. Will default to
# the version used to run pylint.
# NW: We collectively decided our minimum python version was 3.10
py-version=3.10

[MESSAGES CONTROL]

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to
# disable everything first and then re-enable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
# NW: These are inherited from our old .pylintrc. We should remove all of these
# eventually.
disable=raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        use-symbolic-message-instead,
        import-error,
        duplicate-code

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
# NW: I'm not sure where this came from
enable=c-extension-no-member


[REPORTS]

# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each
# category, as well as 'statement' which is the total number of statements
# analyzed. This score is used by the global evaluation report (RP0004).
# evaluation=max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))

# NW: Remove convention and refactor warnings from the evaluation.
# This is the only way I've found to have both of these things be true at once:
# 1: Pylint will fail on errors, but not on refactor messages
# 2: Pylint will print refactor messages
evaluation=max(0, 0 if fatal else 10.0 - ((float(5 * error + warning) / statement) * 10))

# Tells whether to display a full report or only the messages.
reports=no

# Activate the evaluation score.
# NW: This is the default, kept for clarity
score=yes


[SPELLING]

# List of comma separated words that should be considered directives if they
# appear at the beginning of a comment and should not be checked.
# NW: The pyright and type directives appear to be custom
spelling-ignore-comment-directives=fmt: on,
                                   fmt: off,
                                   noqa:,
                                   noqa,
                                   nosec,
                                   isort:skip,
                                   mypy:,
                                   pyright:,
                                   type:

[CLASSES]

# List of valid names for the first argument in a metaclass class method.
# NW: The only default entry is mcs
valid-metaclass-classmethod-first-arg=mcs,cls,metacls


[DESIGN]

# Maximum number of arguments for function / method.
# NW: Increased from 5
max-args=15

# Maximum number of attributes for a class (see R0902).
# NW: Increased from 7
max-attributes=15
